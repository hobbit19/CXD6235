#!/usr/bin/python
#encoding=utf-8
#pls install:apt-get install python-wxtools
import wx
import os
import re
import sys
import urllib
import pexpect
from commands import *
import ALM_check
import MySQLdb
import send_mail
import MySQLdb.cursors #add by shuangyan.he
from time import strftime, localtime
import datetime
import time
import ALM_check_status
reload(sys)
sys.setdefaultencoding('utf-8')


class App(wx.App):
	def OnInit(self):
		frame = MyFrame()
		frame.Show()
		return True
		
class Message:
	def __init__(self):
		self.comment = ''
		self.bugnumber = ''
		self.productname = ''
		self.rootcause = ''
		self.nextgitpath = '' #add by shuangyan.he 2016-04-06
		self.mtkpatch_num = '' #add by shuangyan.he 20160624
		self.patchtype = '' #add by shuangyan.he 20160713
		self.vnum_choice = '' #add by shuangyan.he 20160705
		self.ifmtkpatch=''    #add by shuangyan.he 20160711
		self.rootdetail = ''  #add by yinfang.lai begin 2015-06-03
		self.moduleimpact = ''
		self.testsuggestion = ''
		self.solution = ''
		self.testreport = ''
		self.valtest = ''
		self.bug_category_cause =''
		self.jrd_bug_cause = ''
		self.menu_change = ''
		self.currProjectBranch = ''
		self.bug_reason_cause = ''


class Commit:
	# begain add by shuangyan.he 20160625 for method of class
	def setMessage(self,message):
		self.msg = message
	# end add by shuangyan.he 20160625 
	defect_summary = ''
	arrmtk_id=[] #add by shuangyan.he 20160822
	arr_mmid=[] #add by shuangyan.he 20160726
	bug_reason_list = ['','Platform','Android','3rd Party','T2M','UE Design','SW Code','Perso Tool Chain','Translation','Customization','HW Related Implementation','New Requirement','UE Improvement','HW Design','Others','Not Reproduced','Not A Bug','Direct Duplicated','Deep Duplicated','Parameters','PC Tools','FOTA Tools Server Chain','Non GApp Scope','Non Isolation GApp','UE Implementation','SW Translation Error','External Translation feedback','Customization config','Customization mechanism','Parameters Integration','GAPP']
        spm_email=[]
        isimpactfota=False
        impactFotaFileAndDir=[]
        impactTeeFileAndDir=[]
        impactPersistFileAndDir=[]

	def ComboMessage(self, message):
		# begain add by shuangyan.he 20160624
		if(message.mtkpatch_num.strip()):
			self.message = '###%%%%%%comment:[mtk patch][%s] %s\n' %(message.mtkpatch_num.strip(),message.comment.strip())
		else:
			self.message = '###%%%%%%comment:%s\n' % message.comment.strip()
		# end add by shuangyan.he 20160624
		self.message += '###%%%%%%bug number:%s\n' % message.bugnumber.strip()
		self.message += '###%%%%%%product name:%s\n' % message.productname.strip()
		self.message += '###%%%%%%root cause:%s\n' % message.rootcause.strip()
		self.message += '###%%%%%%root cause detail:%s\n' % message.rootdetail.strip()  #add sdd1 by yinfang.lai begin 2015-06-03
		self.message += '###%%%%%%Bug category:%s\n' % message.bug_category_cause.strip()
		if (message.bug_category_cause.strip() == 'TCT'):
			self.message += '###%%%%%%Generated by:%s\n' % message.jrd_bug_cause.strip()

		self.message += '###%%%%%%Module_Impact:%s\n' % message.moduleimpact.strip()
		self.message += '###%%%%%%Change Menutree or image:%s\n' % message.menu_change.strip()
		self.message += '###%%%%%%Test_Suggestion:%s\n' % message.testsuggestion.strip()
		self.message += '###%%%%%%Solution:%s\n' % message.solution.strip()
		self.message += '###%%%%%%Test_Report:%s\n' % message.testreport.strip()
		self.message += '###%%%%%%VAL Can Test:%s\n' % message.valtest.strip()
		self.message += '###%%%%%%Bug_Reason:%s\n' % message.bug_reason_cause.strip()
                if (self.isimpactfota):
                    self.message += '###%%%%%%[Fota Warning] some changes may impact fota!!\n'
		#test

		#for sdd1 by yinfang.lai begin 2015-6-18
		# replace " & \n
		#self.message = self.message.replace("\n","")
		self.message = self.message.replace('"',"")
		self.message = self.message.replace("'","")
		#for sdd1 by yinfang.lai end 2015-6-18
		print self.message

		#end
		return
	
	#add by yinfang.lai 2015-08-21
	def getalmbranch(self,project):
		url = 'http://10.92.32.10/gitweb.cgi?p=scm_tools.git;a=blob_plain;f=conf/almconfig'
		f = urllib.urlopen(url, proxies={})
		branch =[]
		for line in f:
			line = line.strip()
			line = line.replace('"','')
			print line
			almbranch = line.split(',')
			print almbranch
			if project in almbranch:
				print almbranch
				return almbranch
		return branch
	#add by yinfang.lai 2015-08-21 end

	#modify yinfang.lai 2015-03-16 begin	
	def GetModifyFile(self, filelist):

		#temp = os.popen("git status ./ -uno | awk  '/modified/' | awk '{print  $3}'")
		#temp1 = os.popen("git status ./ -uno | awk  '/deleted/' | awk '{print  $3}'")
		#temp2 = os.popen("git status ./ -uno | awk  '/new file/' | awk '{print  $4}'")
		#temp3 = os.popen("git status ./ -uall | sed -n '/Untracked files:/,/to commit/p' | sed -n '4,/to commit/p' | awk '/#/' | awk '{print $2}'")
		#temp4 = os.popen("git status ./ -uno | awk '/renamed/' | awk '{print  $3\" \"$4\" \"$5}'")
		temp = os.popen("git status ./ -s | awk  '/M /' | awk '{print  $2}'")
		temp1 = os.popen("git status ./ -s |awk '/A /' | awk '{print  $2}'")
		temp2 = os.popen("git status ./ -uno | awk '/renamed/' | awk '{print  $3\" \"$4\" \"$5}'")
		#temp3 = os.popen("git status ./ -uall | sed -n '/Untracked files:/,/to commit/p' | sed -n '4,/to commit/p' | awk '/#/' | awk '{print $2}'")
		#temp4 = os.popen("git status ./ -uno | awk '/renamed/' | awk '{print  $3\" \"$4\" \"$5}'")
		#modify by yinfang.lai 2015-03-16  accommodate diffent language begin
		temp5 = os.popen("git ls-files -d | awk '{print  $1}'")
		temp6 = os.popen("git ls-files -m | awk '{print  $1}'")
		temp7 = os.popen("git ls-files -o --exclude-standard | awk '{print  $1}'")
                temp8 = os.popen("git status ./ -s | awk '/UU /' | awk '{print $2}'")  #add by zhaoshie 20160629
		#modify by yinfang.lai 2015-03-16 end 
		self.fileDic = {}
		temList = []
		for lines in temp.readlines():
			temp = 'M--%s'%lines[:-1]
			if lines[:-1] in temList:
				continue
			filelist.append(temp)
			temList.append(lines[:-1])
			self.fileDic[temp]='unselect_modified'
		for lines in temp1.readlines():
			temp = 'A--%s'%lines[:-1]
			if lines[:-1] in temList:
				continue
			filelist.append(temp)
			temList.append(lines[:-1])
			self.fileDic[temp]='unselect_added'
		for lines in temp8.readlines():
			temp = 'U--%s'%lines[:-1]
			if lines[:-1] in temList:
				continue
			filelist.append(temp)
			temList.append(lines[:-1])
			self.fileDic[temp]='unselect_unmerged'

		for lines in temp2.readlines():
			if lines[:-1] in temList:
				continue
			temp = 'R--%s'%lines[:-1]
			filelist.append(temp)
			temList.append(lines[:-1])
			self.fileDic['R--%s'%lines[:-1]]='unselect_renamed'
		##for lines in temp3.readlines():
		#	filelist.append('A--%s'%lines[:-1])
		#	self.fileDic['A--%s'%lines[:-1]]='unselect_added'
		#for lines in temp4.readlines():
		#	filelist.append('A--%s'%lines[:-1])
		#	self.fileDic['A--%s'%lines[:-1]]='unselect_renamed'
		for lines in temp5.readlines():
			if lines[:-1] in temList:
				continue
			temp = 'D--%s'%lines[:-1]
			filelist.append(temp)
			temList.append(lines[:-1])
			self.fileDic[temp]='unselect_deleted'
		for lines in temp6.readlines():
			temp = 'M--%s'%lines[:-1]
			if lines[:-1] in temList:
				continue
			filelist.append(temp)
			temList.append(lines[:-1])
			self.fileDic[temp]='unselect_modified'
		for lines in temp7.readlines():
			temp = 'A--%s'%lines[:-1]
			if lines[:-1] in temList:
				continue
			filelist.append(temp)
			temList.append(lines[:-1])
			self.fileDic[temp]='unselect_added'
		
		#test	
		#print filelist
		#end
		print self.fileDic		
		return
		
	def GetProjectList(self, prolist):
		for line in urllib.urlopen('http://10.92.32.10/gitweb.cgi/?p=scm_tools.git;a=tree;f=conf/projects', proxies={}).readlines():
			#print line
			#match = re.match('<td\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*.xml', line)
			match = re.match('<td class="list">.*projects/([^\s+]*?);h=.*', line)
			if match:
				#line1 = re.sub('<td\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*?>', '', line)
				#line2 = re.sub('</a></td>', '', line1)
				#prolist.append(line2[:-1])
				prolist.append(match.group(1))
		#test
		#print prolist
		#end
		return

	# begain add by shuangyan.he 20160706
	def getidvnum_mtkmerge(self,pnum,CodeBranch,patchtype):
		dotp_conn=MySQLdb.connect('10.92.35.20', port=3306, user='INT_PATCH', passwd='Aa123456', db='dotproject',cursorclass=MySQLdb.cursors.DictCursor)
		selectsql = 'SELECT mp.id, mp.vnum FROM (dotp_mtk_merge AS mm) JOIN (dotp_mtk_import AS mp) ON mp.id = mm.import_id WHERE mp.pnum ="%s" AND mm.merge_patch = "%s" AND mp.patch_type = "%s" ORDER BY mp.TS DESC LIMIT 0,1'%(pnum,CodeBranch,patchtype)
		dotpdb_cursor = dotp_conn.cursor()
		dotpdb_cursor.execute(selectsql) 
		result = dotpdb_cursor.fetchall()
		if result:
			idvum_num=len(result)
			imid=""
			vnum=""
			idvnum_dic={}
			for i in range(0,idvum_num):
				imid=result[0]['id']
				vnum=result[0]['vnum']
				idvnum_dic[imid] =vnum
			return idvnum_dic
		else:
			print "--------Pnum should exist mtk_merge--------\n"
			return False
	# end add by shuangyan.he 20160706

	#add yinfang.lai for sdd1 2015-03-13 begin
	def update_bug_reason_prsm(self,product_config,bug_reason_str,defects):
		defects = defects.strip()
		dotp_conn=MySQLdb.connect('10.92.35.20', port=3306, user='INT_PATCH', passwd='Aa123456', db='dotproject')
            	#dotp_conn=MySQLdb.connect('127.0.0.1', port=3306, user='root', passwd='tcl@123', db='dotproject')
		ii=0
		bug_reason_id = 0
		for item_reason in self.bug_reason_list:
			if item_reason == bug_reason_str :
				bug_reason_id = ii
                	ii=ii+1
		defectList = defects.split(',')
		if product_config == "ALM":
			defectStr = "'D"+"','D".join(defectList)+"'"
		else:
			defectStr = "'"+"','".join(defectList)+"'"
		print defectStr
		insertsql = "UPDATE dotp_bugs SET bug_reason=%d WHERE bug_id in (%s) " %(bug_reason_id,defectStr)
		#for defect in defectList:
		#	if product_config == "ALM":
		##		defect = "D%s" %defect 
		#		insertsql = "UPDATE dotp_bugs SET bug_reason=%d WHERE bug_id = '%s' " %(bug_reason_id,defect)
		#	else:
		#		insertsql = "UPDATE dotp_bugs SET bug_reason=%d WHERE bug_id = '%s' " %(bug_reason_id,defect)
		#print insertsql
		dotpdb_cursor = dotp_conn.cursor()
		dotpdb_cursor.execute(insertsql)
        	dotp_conn.commit();
        	dotpdb_cursor.close()
		dotp_conn.close()
	#add yinfang.lai for sdd1 2015-03-13 end
	
	#add yinfang.lai for sdd1 2016-12-09 begin	
	def check_last_mtk_patch_status(self,branchname,lastpnum):
		if lastpnum <= 0:
			return 0;
		db_conn=MySQLdb.connect('10.92.35.20', port=3306, user='INT_PATCH', passwd='Aa123456', db='dotproject')
		getidsql = "SELECT mm.`merge_status`,`bug_id`, mm.id,mm.owner FROM `dotp_mtk_merge` as mm left join `dotp_mtk_import` as mi on mm.import_id =mi.id WHERE `merge_patch`='%s' and `pnum`='P%s'"%(branchname,lastpnum)
		print getidsql
		dotpdb_cursor = db_conn.cursor()
		dotpdb_cursor.execute(getidsql) 
		mmresult = dotpdb_cursor.fetchone()
		print mmresult
		if mmresult:
			if len(mmresult) == 0:
				print "\n--------- NO import record in SmartTask ---------\n"
				sys.exit(1)
			mm_status=mmresult[0]
			bugs=mmresult[1]
			mm_id=mmresult[2]
			mm_owner=mmresult[3]
			if mm_status != 0:
				print "Last mtk patch is merged!"
				return 0
			else:
				if bugs == "":
					print "\n--------- Waiting mtk patch lastpnum merged!Please contact %s to check last mtk patch status! -----------\n" %mm_owner
					sys.exit(2)
				defectList = bugs.split(',')
				print(defectList);
				for defect in defectList:
				    #defect='3328428'
				    if defect == "":
				    	continue
				    error_flag = ALM_check_status.legal_ID(branchname,defect)
				    if error_flag == 200:
					print "OK! go next \n";
				    elif error_flag == 600:
					print "\n---------%s Status Error!! State isn't Delivered or Verified_SW,Verified,Closed,Postponed,Deleted ,please check status of task or defect!---------\n" %defect;  
					print "\n---------Waiting mtk patch P%s merged!Please contact %s to check last mtk patch status---------\n" %(lastpnum,mm_owner)                           
		                        sys.exit(2)
		                try:
		               		dotpdb_cursor = db_conn.cursor()
		               		updatesql = "UPDATE dotp_mtk_merge SET merge_status=1 WHERE merge_patch='%s' and id='%s'"%(branchname,mm_id)
		               		print updatesql
					dotpdb_cursor.execute(updatesql) 
				except Exception, e:
					print "update last mtk patch status error!Please contact %s to check last mtk patch status" %mm_owner
		
		else:			
			print "\n---------Can't connect to SmartTask!Please contack to INT!---------\n"	       
                	sys.exit(4)
	#add yinfang.lai for sdd1 2016-12-09 end
	               
	#begain add by shuangyan.he 20160707
	def update_mtkpatch_mtkmerge(self,pnum,CodeBranch,patchtype,vnum,bug_id,gerrit_link,owner,TS):
		db_conn=MySQLdb.connect('10.92.35.20', port=3306, user='INT_PATCH', passwd='Aa123456', db='dotproject')
		getidsql = "SELECT mp.id as chooseid,mm.id,mm.bug_id,mm.gerrit_link FROM (dotp_mtk_merge AS mm ) JOIN (dotp_mtk_import AS mp) ON mp.id = mm.import_id WHERE mp.pnum ='%s' AND mm.merge_patch = '%s' AND mp.patch_type = '%s' and mp.vnum='%s'"%(pnum,CodeBranch,patchtype,vnum)
		dotpdb_cursor = db_conn.cursor()
		dotpdb_cursor.execute(getidsql) 
		mmresult = dotpdb_cursor.fetchall()
		if not mmresult:
			print "\n--------mm.id should exist mtk_merge--------\n"
			return False
		while mmresult:
			for i in range(0,len(mmresult)):
				chooseid=mmresult[i][0]
				mtk_id=mmresult[i][1]
				self.arrmtk_id.append(mtk_id)
				bugid_old=mmresult[i][2]
				gerrit_link_old=mmresult[i][3]
				if(len(bugid_old)==0):
					bugid_new=bug_id
				else:
					arrbugid_old = bugid_old.split(',')
					arrbug_id = bug_id.split(',')
					arrbugid_new=list(set(arrbugid_old).union(set(arrbug_id)))
					bugid_new = ','.join(arrbugid_new)
				if gerrit_link_old=="":
					gerrit_link_new=gerrit_link
				else:
					gerrit_link_new=gerrit_link_old+",\n"+gerrit_link
				print "begin to update bug_id/owner/gerritlink/TS to %s,mp.id=%s\n"%(CodeBranch,chooseid)
				updatesql = 'UPDATE dotp_mtk_merge SET bug_id="%s",gerrit_link="%s",owner="%s",TS="%s" WHERE import_id="%s" and merge_patch="%s"'%(bugid_new,gerrit_link_new,owner,TS,chooseid,CodeBranch)
				upresult = dotpdb_cursor.execute(updatesql)
				db_conn.commit()
				if upresult:
					print "update mtk_merge %s mm.import_id=%s OK.\n"%(CodeBranch,chooseid)
				else:
					print "update mtk_merge %s failed,Pls contact INT\n"%CodeBranch
			break
		dotpdb_cursor.close()
		db_conn.close()
		#begain add by shuangyan.he 20160722
		#judge other comon branch by shuangyan.he 20160726
		gitpath_name = getoutput("git remote -v | tail -1 | awk -F' ' '{print $2}' | sed -e 's/.*://' -e 's/.git//'")
		gitpath_name = gitpath_name[9:]
		dicbranchgit = self.get_mtkcombranch(CodeBranch)
		for key in dicbranchgit:
			com_branch=key
			diff_git=dicbranchgit[key]
			if(gitpath_name not in diff_git):
				print "[%s] with [%s] samecode,update it too.\n"%(com_branch,CodeBranch)
				mmid=self.update_other_combranch(pnum,vnum,com_branch,patchtype,bug_id,gerrit_link,owner,TS)
				self.arr_mmid.append(mmid)
		#end add by shuangyan.he 20160722
		return
	#end add by shuangyan.he 20160707

	#begain add by shuangyan.he 20160726
	def get_mtkcombranch(self,CodeBranch):
		url = "http://10.92.32.10/gitweb.cgi?p=scm_tools.git;a=blob_plain;f=conf/mtkcombranch"
		#url = "/local/tools/scm_tools/conf/mtkcombranch"
		f = urllib.urlopen(url, proxies={})
		com_branch = ""
		diff_git = ""
		dicbranchgit={}
		for line in f:
			readline = line.split(';')
			if CodeBranch in readline[0].strip():
				com_branch = readline[1].strip()
				diff_git = readline[2].strip()
				dicbranchgit[com_branch]=diff_git
		return dicbranchgit

	def update_other_combranch(self,pnum,vnum,com_branch,patchtype,bug_id,gerrit_link,owner,TS):
		db_conn=MySQLdb.connect('10.92.35.20', port=3306, user='INT_PATCH', passwd='Aa123456', db='dotproject')
		select2sql = "SELECT mm.id,mm.bug_id,mm.gerrit_link FROM (dotp_mtk_merge AS mm) JOIN (dotp_mtk_import AS mp) ON mp.id = mm.import_id WHERE mp.pnum ='%s' AND vnum='%s' and mm.merge_patch = '%s' AND mp.patch_type = '%s'" %(pnum,vnum,com_branch,patchtype)
		dotpdb_cursor = db_conn.cursor()
		dotpdb_cursor.execute(select2sql) 
		othresult = dotpdb_cursor.fetchall()
		if not othresult:
			print "\nmm.id should exist mtk_merge.\n"
			return False
		else:
			mmid=othresult[0][0]
			bugid_old2=othresult[0][1]
			gerrit_link_old2=othresult[0][2]
			if(len(bugid_old2)==0):
				bugid_new2=bug_id
			else:
				arrbugid_old2 = bugid_old2.split(',')
				arrbug_id2 = bug_id.split(',')
				arrbugid_new2=list(set(arrbugid_old2).union(set(arrbug_id2)))
				bugid_new2 = ','.join(arrbugid_new2)
			if gerrit_link_old2=="":
				gerrit_link_new2=gerrit_link
			else:
				gerrit_link_new2=gerrit_link_old2+",\n"+gerrit_link
			#update other branch
			print "begin to update bug_id/owner/gerritlink/TS to %s.\n "%com_branch
			update2sql = "UPDATE dotp_mtk_merge SET bug_id='%s', gerrit_link='%s', owner='%s', TS='%s' WHERE id='%s' and merge_patch='%s'"%(bugid_new2,gerrit_link_new2,owner,TS,mmid,com_branch)
			up2result = dotpdb_cursor.execute(update2sql)
			db_conn.commit()
			if up2result:
				print "update mtk_merge %s mm.id=%s OK.\n"%(com_branch,mmid)
			else:
				print "update mtk_merge %s failed,Pls contact INT\n"%com_branch
			dotpdb_cursor.close()
			db_conn.close()
		return mmid
	#end add by shuangyan.he 20160726

	#add by yinfang.lai 2015-03-13
	#get sdd1 project and ALM or Bugzilla
	def getswdproject(self,project,tmp_pr_System):
		url = 'http://10.92.32.10/gitweb.cgi?p=scm_tools.git;a=blob_plain;f=conf/config'
		f = urllib.urlopen(url, proxies={})
		for line in f:
			m = re.match('^\s*([^\s]+)\s+([^\s]+)\s+([^\s]+)', line)
			if m:                             
				if m.group(1) == project:
					projectStr = m.group(2)
					tmp_pr_System.append(m.group(3))
					print projectStr
					m1 = re.match("^(sdd1/*manifest.git)[^\s]+",projectStr)    
					if m1:                                               
						if m1.group(1) == 'sdd1/manifest.git':
							return 1
						else:
							#return 0
							return 1
					m1 = re.match("^(genericapp/*manifest.git)[^\s]+",projectStr)
					if m1:
						if m1.group(1) == 'genericapp/manifest.git':
							return 1
						else:
							#return 0
							return 1
				else:
					continue
		#return 0
		return 1


	#get project branch
	def down_repo_branch(self):
    		branch = " "
    		branch = getoutput("git branch -a | grep '\->' | sed -e 's/.*jgs.//'")
    		return branch	
	def down_git_branch(self):
    		branch = " "
    		branch = getoutput("git branch | grep '*' | sed -e 's/\* //' ")
    		return branch

	#check ALM defect and task state
	def check_defect_task(self,product,defects,almbranchs):
		defectList = defects.split(',')
        	print defectList
		patch_delivery_path = sys.path[0]
		for defect in defectList:
			print "%s/ALM_check.py %s %s" %(patch_delivery_path,product,defect)
			#error_flag = os.popen("%s/ALM_check.py %s %s" %(patch_delivery_path,product,defect));
			error_flag = ALM_check.legal_ID(product,defect)
			
			if 'all' in almbranchs:
				continue
			if len(almbranchs) !=0:
				if ALM_check.DEFECT_BRANCH not in almbranchs:
					print "\033[31m=============================\n\033[0m"
					print "\033[31mError!!bug's branch not belong %s ,please check your bug is right!!! \n\033[0m"%product;
					print "\033[31m=============================\n\033[0m"
					#print 'pass'       
		                        return False
					#sys.exit(0)	
			self.defect_summary +="%s ==>ALM branch: %s \n   ==>summary:%s\n"%(defect,ALM_check.DEFECT_BRANCH,ALM_check.DEFECT_SUMMARY)
                        print ALM_check.PROJECT_SPM
                        self.spm_email.append(ALM_check.PROJECT_SPM)
			print '****************************'
			if error_flag == 200:
				print "OK! go next \n";
			elif error_flag == 600:
				print "\033[31mError!! State isn't Resolved or Opened ,please check status of task or defect! \n\033[0m";                             
                                return False
				#sys.exit(0)
			elif error_flag == 206:
				print "\033[31mError!! This id doesn't have any related utc , please check bugid or contact with SPM!  \n\033[0m";
                                return False
				#sys.exit(0)
			elif error_flag == 404:
				print "\033[31mError!! This id deosn't exist in Integrity , please check bugid! \n\033[0m";
                                return False
				#sys.exit(0)
			elif error_flag == 500:
				print "\033[31Error!! Error while requesting the Integrity Server , please contact with INT!\n\033[0m";
				sys.exit(0)
			elif error_flag == 505:
				print "\033[31mError!!NO Platform Supported , please check again or contact with SPM! \n\033[0m";
				sys.exit(0)
			else:
				print "\033[31mError!!Reason is unclear,Please contact with INT!\n\033[0m";
				sys.exit(0)
		return True
	#add by yinfang.lai 2015-03-13 end


       #add by zhaoshie 2016-5-12 for impact app change
	def GitEmail(self, email):
	        temp = os.popen("git config --list | grep user.email | sed -e 's/.*=//'")
		for lines in temp.readlines():
			email.append(lines[:-1])
		return email

        def getChangeId(self):               
                currentCommitId = getoutput("git log -1 | head -n 1 | awk '{print $2}'")                
	        changeIdLine = getoutput("git ls-remote jgs refs/changes/* | grep %s | awk '{print $2}'" %currentCommitId)
                changes=changeIdLine.split("/")
                changeId=changes[3]
	        return changeId


        def impact_app_warning(self,gitname,branch,commitlist):
                #print gitname
                flag=0
                impact_files = []
                perso_team = ['xiaofen.zhong@tcl.com', 'yanxiang.zhang@tcl.com', 'xiaoling.luo@tcl.com', 'jinghu@tcl.com', 'shuang.zhong.hz@tcl.com','yunna.hua@tcl.com','junbo.zeng@tcl.com','shie.zhao@tcl.com']
                if "wcustores" in gitname or "wprocedures" in gitname :
                     patch_delivery_path = sys.path[0]                               
                     repo_path_1 = getoutput('bash %s/find_repo_path.sh' %patch_delivery_path) 
                     repo_path_2 = repo_path_1.split("\n")
                     repo_path = repo_path_2[-1]
                     current_path = getoutput("pwd")
                     git_path = current_path.replace(repo_path,' ')
                     for file_name in commitlist :
                         file_name = file_name[3:]
                         if 'App/' in file_name or '/App' in git_path or 'zz_thirty_app.mk' in file_name:
                             flag = 1
                             file_name = git_path + '/' + file_name
                             impact_files.append(file_name)                        
                     author_email = []
                     self.GitEmail(author_email)
                     if flag == 1 and author_email not in perso_team :
                         changeId = self.getChangeId()
                         perso_team.append(author_email[0])      
                         to_list = perso_team #add by shuangyan.he 20160627
                         cc_list = []
                         subject = "[App Warning][%s] some changes may impact App " %branch
                         html = "<html><head>"
	                 html += "<meta http-equiv='Content-Language' content='zh-cn'> "
                         html += "<meta http-equiv='Content-Type' content='text/html; charset=utf-8'> "
                         html += "</head>"
                         html += "<body> "
    	                 html += " <span style='color:blue'><b> %s.</b></span>" %author_email[0]
	                 html += "<span> has modified as follow files:</span><br/>"
                         print "impact App files is %s" %impact_files
                         for file_name in impact_files:
                             html += "<span> %s </span><br/>" %file_name
                        
                         html += "<b>Pls Notice these changes,they may impact App</b><br/><br/>"
                         html += "<span style='color:green'>Change Info on Gerrit:</span><br/>"
                         html += "<a href='http://10.92.32.10:8081/#/c/%s/'>http://10.92.32.10:8081/#/c/%s/</a><br/><br/>" %(changeId,changeId)
    	                 html += " </body> "
                         html += " </html> "
                         mail_content = html                       
                         print "impact_app_warning Send Email to %s " %to_list
                         print "--------- app warning Send Email ok ---------\n"   #add by shuangyan.he 20160627
                         send_mail.send_mail('hudson.admin.hz', 'hudson.admin.hz@tcl.com', subject, mail_content, to_list,
                         'hudson.admin.hz','12345678',cc_list)  # attach_dir
                         
       #end by zhaoshie 2016-5-12 

	# begain add by shuangyan.he 20160625
	def mtkpatch_email_remind(self,gitname,branch,commitlist):
		impact_files = []
                mtkpatch_recipients = ["renzhi.yang.hz@tcl.com","shie.zhao@tcl.com","shuangyan.he@tcl.com"]
                #mtkpatch_recipients = ["835344992@qq.com","guoliang.hu@tcl.com"]
		author_email = []
		self.GitEmail(author_email)
		mtkpatch_recipients.append(author_email[0]) 
		if(self.msg.mtkpatch_num.strip()):
			patch_delivery_path = sys.path[0]                               
			repo_path_1 = getoutput('bash %s/find_repo_path.sh' %patch_delivery_path) 
			repo_path_2 = repo_path_1.split("\n")
			repo_path = repo_path_2[-1]
			current_path = getoutput("pwd")
			git_path = current_path.replace(repo_path,' ')
			for file_name in commitlist :
				file_name = file_name[3:]
				file_name = git_path + '/' + file_name
				impact_files.append(file_name) 
			changeId = self.getChangeId()
			arrbugnumber=self.msg.bugnumber.split(',')
			for strbugnum in arrbugnumber:
				if(len(strbugnum)==0):
					arrbugnumber.remove(strbugnum)
			cc_list = []
			subject = "[MTK patch remind][%s][%s] MTK patch delivered to Gerrit " %(self.msg.mtkpatch_num.strip(),branch)
			html = "<html><head>"
			html += "<meta http-equiv='Content-Language' content='zh-cn'> "
			html += "<meta http-equiv='Content-Type' content='text/html; charset=utf-8'> "
			html += "</head>"
			html += "<body> "
			html += " <span style='color:blue'><b> %s.</b></span><br/><br/>" %author_email[0]
			html += " <span style='color:green'><b>Bug number:%s</b></span><br/>" %self.msg.bugnumber
			while(len(arrbugnumber)>=1):
				for strbugnum in arrbugnumber:
					html += "<a href='https://alm.tclcom.com:7003/im/issues?selection=%s'>https://alm.tclcom.com:7003/im/issues?selection=%s</a><br/><br/>" %(strbugnum,strbugnum)
				break
			html += "<span style='color:green'><b>Change Info on Gerrit:</b></span><br/>"
			html += "<a href='http://10.92.32.10:8081/#/c/%s/'>http://10.92.32.10:8081/#/c/%s/</a><br/><br/>" %(changeId,changeId)
			html += "<span style='color:green'><b>Mtk patch type:%s</b></span><br/><br/>"%self.msg.patchtype
			html += "<span style='color:green'><b>Pls modify Merge Status on SmartTask:</b></span><br/>"
			while(len(self.arrmtk_id)>0):
				for strmtk_id in self.arrmtk_id:
					html +="<a href='http://10.92.35.20/SmartTask/index.php?m=mtkpatch&a=view&mtk_id=%s'>http://10.92.35.20/SmartTask/index.php?m=mtkpatch&a=view&mtk_id=%s</a><br/><br/>" %(strmtk_id,strmtk_id)
				break
			while(len(self.arr_mmid)>0):
				for strmmid in self.arr_mmid:
					html +="<a href='http://10.92.35.20/SmartTask/index.php?m=mtkpatch&a=view&mtk_id=%s'>http://10.92.35.20/SmartTask/index.php?m=mtkpatch&a=view&mtk_id=%s</a><br/><br/>" %(strmmid,strmmid)
				break
			html += "<span style='color:red'> <b>MTK patch delivered to Gerrit,Pls Notice:</b></span><br/>"

			for file_name in impact_files:
				html += "<span> %s </span><br/>" %file_name
			html += " </body> "
			html += " </html> "
			mail_content = html                    
			send_mail.send_mail('hudson.admin.hz', 'hudson.admin.hz@tcl.com', subject, mail_content, mtkpatch_recipients,'hudson.admin.hz','12345678',cc_list)
			print "---------- mtkpatch Send Email ok ----------\n" 
	# end by shuangyan.he 20160625

        #add by zhaoshie 2016-6-22 for impact fota
        def impact_email_warning(self,impactFileAndDir,branch,impact_type):
                if impact_type == 'fota':
                    sendmail_tolist = ['jinguo.zheng@tcl.com','xiaorong.ling.hz@tcl.com','yizhi.fu@tcl.com','yangning.hong.hz@tcl.com','yan.fang@tcl.com','shie.zhao@tcl.com']
                elif impact_type == 'tee':
                    sendmail_tolist = ['lixiang.he@tcl.com','haihui.jiang.hz@tcl.com','jinguo.zheng@tcl.com','haibo.zhong.hz@tcl.com','shie.zhao@tcl.com']
                elif impact_type == 'persist':
                    sendmail_tolist = ['lixiang.he@tcl.com','yizhi.fu@tcl.com','haihui.jiang.hz@tcl.com','jinguo.zheng@tcl.com','haibo.zhong.hz@tcl.com','shie.zhao@tcl.com']
                author_email = []
                self.GitEmail(author_email) 
                print self.spm_email
                changeId = self.getChangeId()
                sendmail_tolist.append(author_email[0])
                to_list = sendmail_tolist # add by shuangyan.he 20160627
                cc_list = self.spm_email
                #to_list = ['shie.zhao@tcl.com']
                #cc_list = []

                if impact_type == 'fota':
                    subject = "[Fota Warning][%s] some changes may impact fota " %branch
                elif impact_type == 'tee':
                    subject = "[Tee Warning][%s]TEE模块有更新，请负责人点检相关功能" %branch
                if impact_type == 'persist':
                    subject = "[Persist Warning][%s]分区表有变化，请FOTA, HDCP负责人点检相关模块" %branch
                    
                html = "<html><head>"
                html += "<meta http-equiv='Content-Language' content='zh-cn'> "
                html += "<meta http-equiv='Content-Type' content='text/html; charset=utf-8'> "
                html += "</head>"
                html += "<body> "
                html += " <span style='color:blue'><b> %s.</b></span>" %author_email[0]
                html += "<span> has modified as follow files:</span><br/>"
                print "impact files is %s" %impactFileAndDir
                for file_name in impactFileAndDir:
                     html += "<span> %s </span><br/>" %file_name
                if impact_type == 'fota':                
                     html += "<b>Pls Notice these changes,they may impact Fota </b><br/><br/>"
                elif impact_type == 'tee':                
                     html += "<b>Pls Notice these changes,they may impact TEE </b><br/><br/>"
                elif impact_type == 'persist':                
                     html += "<b>Pls Notice these changes,Persist partition table update, they may impact FOTA or HDCP </b><br/><br/>"
                html += "<span style='color:green'>Change Info on Gerrit:</span><br/>"
                html += "<a href='http://10.92.32.10:8081/#/c/%s/'>http://10.92.32.10:8081/#/c/%s/</a><br/><br/>" %(changeId,changeId)
                html += " </body> "
                html += " </html> "
                mail_content = html                       
                print "--------- warning Send Email ok ---------\n"   #add by shuangyan.he 20160627
                send_mail.send_mail('hudson.admin.hz', 'hudson.admin.hz@tcl.com', subject, mail_content, to_list,'hudson.admin.hz','12345678',cc_list)  # attach_dir
                             
    
          
	def GetGitList(self, name, gitlist, product):
		print '-------------%s--------------'
		urlname = 'http://10.92.32.10/gitweb.cgi?p=scm_tools.git;a=blob;f=conf/projects/'
		urlname += name
		git1 = []
		git2 = []
		for line in urllib.urlopen(urlname, proxies={}).readlines():
			if not product:
				#match = re.match('<div\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*?heads/([^\s+]*?)&[^\s+]*>', line)
				match = re.match('.*heads/([^\s+]*?)&lt.*', line)
				if match:
					print product
					product.append(match.group(1))
					
			#match = re.match('<div\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*\s+[^\s+]*?name&gt;([^\s+]*?)&[^\s+]*>', line)
			match = re.match('<div.*?name&gt;([^\s+]*?)&lt.*', line)
			if match:
				git1.append(match.group(1))
				temp = match.group(1).split('/')
				temp1 = temp[-1]
				git2.append(temp1)
		
		#temp = os.popen('pwd')
		#path = temp.readline()
		#path = temp
		#path1 = path.split('/')
		#temp = path1[-1]
		#temp1 = temp[:-1]
		#modify by yinfang.lai 2015-03-13 begin
		temp = getoutput("git remote -v | tail -1 | awk -F' ' '{print $2}' | sed -e 's/.*://' -e 's/.git//'")
		print 'temp %s temp' %temp
		path1 = temp.split('/')
		temp1 = path1[-1]
		#modify by yinfang.lai 2015-03-13 end

		if temp1 in git2:
			gitlist.append(git1[git2.index(temp1)])
		
		#test
		print product
		print gitlist
		#end
		return

		
	def Commit(self, commitlist):
		commit = ' '.join(commitlist)
		os.system('git add %s' % commit)
		os.system('git commit -m "%s" %s' %(self.message.encode('utf-8'),commit))
		return
		
	#modify by yinfang.lai 2015-03-16 begin
	def CommitDict(self, commitlist,filesDict):
		commit = ' '.join(commitlist)
		print commitlist
		print filesDict
		for key in filesDict.keys():
			print 'key is %s' % key
			cVal = filesDict.pop(key)
			tmpKey =key[3:] 
			tmpKey = tmpKey.replace('$','\$')
			tmpKey = tmpKey.replace('(','\(')
			tmpKey = tmpKey.replace(')','\)')
			print 'cValue is %s' % cVal
			if key in commitlist:
				if (cVal == 'unselect_modified') or (cVal =='unselect_added')  or (cVal =='unselect_renamed') :
					os.system('git add %s' % tmpKey)
					print 'git add %s' %tmpKey
				elif cVal == 'unselect_deleted':
					os.system('git rm -rf %s' % tmpKey)
					print 'git rm -rf %s' %tmpKey
			else:
				os.system('git reset HEAD %s' % tmpKey)
				print 'git reset HEAD %s' % tmpKey

		os.system('git commit -m "%s" ' %(self.message))
		return
	#modify by yinfang.lai 2015-03-16 end

	def GitName(self, name):
		temp = os.popen("git config --list | grep user.name | sed -e 's/.*=//'")
		for lines in temp.readlines():
			name.append(lines[:-1])
		return name
		
	def Gerrit(self, name, git, product):
		print "git push ssh://%s@10.92.32.10:29418/%s HEAD:refs/for/%s" %(name[0], git[0], product[0])
		matchTime = getoutput("git push ssh://%s@10.92.32.10:29418/%s HEAD:refs/for/%s 2>./PushTemp.txt | xargs grep -c '\* \[new branch\]' PushTemp.txt" %(name[0], git[0], product[0]))
		print "matchTime",matchTime
		if matchTime == '0' or matchTime == 0 :	
			os.system('cat PushTemp.txt')
			os.system('rm PushTemp.txt')	
			print 'push fail,try again.... '   
                        matchTime = getoutput("git push --no-thin ssh://%s@10.92.32.10:29418/%s HEAD:refs/for/%s 2>./PushTemp.txt | xargs grep -c '\* \[new branch\]' PushTemp.txt" %(name[0], git[0], product[0]))
                        if matchTime == '0' or matchTime == 0 :
			    os.system('cat PushTemp.txt')
			    os.system('rm PushTemp.txt')
			    print 'push error!!! please check push command!!!!'
			    sys.exit(0) 			
		else:			
			os.system('/usr/bin/firefox "http://10.92.32.10:8081/#q,status:open,n,z"')
		os.system('cat PushTemp.txt')
		os.system('rm PushTemp.txt')
		return

class MyFrame(wx.Frame):
	def __init__(self):
		wx.Frame.__init__(self,None,-1,'Patch Delivery',size=(1120,890))
		#init panel 
		panel = wx.Panel(self, -1)
		self.msg = Message()
		self.com = Commit()
		#begain add by shuangyan.he 20160625
		self.com.setMessage(self.msg)
		global mtkpatch_on
		mtkpatch_on = True  # to turn on mtkpatch judge&email
		#mtkpatch_on = False
		id_choice=""
		#end add by shuangyan.he 20160626

		#add by yinfang.lai 2015-03-13 begin
		self.currProjectBranch = self.com.down_repo_branch()
                if "origin/master" in self.currProjectBranch:
                     self.currProjectBranch = self.com.down_git_branch() #add by zhaoshie for GAPP patch delivery
                     #print self.currProjectBranch
		self.pro_config = 'Bugzilla'
		pro_configList = []
	        self.product_sdd1_tag = self.com.getswdproject(self.currProjectBranch,pro_configList)
       		self.pro_config = pro_configList[0]
		print 'PR System: %s' %self.pro_config
		#add by yinfang.lai 2015-03-13 end

		#init static
		font = wx.Font(10, wx.ROMAN, wx.NORMAL, wx.BOLD)
		sproduct = wx.StaticText(panel, -1, "Product", size=wx.DefaultSize)
		sproduct.SetFont(font)
		sbug = wx.StaticText(panel, -1, "Bug Number", size=wx.DefaultSize)
		sbug.SetFont(font)
		sroot = wx.StaticText(panel, -1, "Root Cause", size=wx.DefaultSize)
		sroot.SetFont(font)

		#begin add by yinfang.lai begin 2015-06-03
		sroot_detail = wx.StaticText(panel, -1, "Root Cause Detail", size=wx.DefaultSize)
		sroot_detail.SetFont(font)
		#end add by yinfang.lai begin 2015-06-03

		#add by yinfang.lai 2015-03-13 begin
		smodule = wx.StaticText(panel, -1, "Module Impact", size=wx.DefaultSize)
		smodule.SetFont(font)
		scategory = wx.StaticText(panel, -1, "Bug category", size=wx.DefaultSize)
		scategory.SetFont(font)
		sjrdbug = wx.StaticText(panel, -1, "Generated by", size=wx.DefaultSize)
		sjrdbug.SetFont(font)
		sMenu = wx.StaticText(panel, -1, "Change Menutree or Image", size=wx.DefaultSize)
		sMenu.SetFont(font)
		#add by yinfang.lai 2015-03-13 end


		ssolution = wx.StaticText(panel, -1, "Solution", size=wx.DefaultSize)
		ssolution.SetFont(font)
		ssuggestion = wx.StaticText(panel, -1, "Test Suggestion", size=wx.DefaultSize)
		ssuggestion.SetFont(font)
		stctxt1 = wx.StaticText(panel, -1, "The suggestion to VAL that how to test the patch and find possible side effect", size=wx.DefaultSize)
		sreport = wx.StaticText(panel, -1, "Test Report", size=wx.DefaultSize)
		sreport.SetFont(font)
		stctxt2 = wx.StaticText(panel, -1, "What's test has been done and the result before submit the patch ?", size=wx.DefaultSize)
		sval = wx.StaticText(panel, -1, "VAL Can Test", size=wx.DefaultSize)
		sval.SetFont(font)
		scomment = wx.StaticText(panel, -1, "Comment", size=wx.DefaultSize)
		scomment.SetFont(font)
		#begain add by shuangyan.he 2016-04-11
		snextgitpath = wx.StaticText(panel, -1, "Next git path", size=wx.DefaultSize)
		snextgitpath.SetFont(font)
		stctxt3 = wx.StaticText(panel, -1, "If you want to push more than one git repository,Input other one git path here.", size=wx.DefaultSize)
		#end add by shuangyan.he 2016-04-11
		supdate = wx.StaticText(panel, -1, "Auto Push", size=wx.DefaultSize)
		supdate.SetFont(font)
		modify = wx.StaticText(panel, -1, "Modify File", size=wx.DefaultSize)
		modify.SetFont(font)
		commit = wx.StaticText(panel, -1, "Commit File", size=wx.DefaultSize)
		commit.SetFont(font)
		filter1 = wx.StaticText(panel, -1, "Filter", size=wx.DefaultSize)
		filter1.SetFont(font)
		
		#init text
		#self.sproduct = wx.TextCtrl(panel, -1, "ss", size=wx.DefaultSize)
		self.bug = wx.TextCtrl(panel, -1, "", size=wx.DefaultSize)
		# begain add by shuangyan.he 20160624
		if(mtkpatch_on):
			sifmtkpatch = wx.StaticText(panel, -1, " Is MtkPatch?", size=wx.DefaultSize)
			sifmtkpatch.SetFont(font)
			self.ifmtkpatch = wx.ComboBox(panel, -1, '', (0,0), (65,28),['Yes','No'], wx.CB_SIMPLE) #add by shuangyan.he 201607
			smtkpatch = wx.StaticText(panel, -1, "Pnum(eg:P2)", size=wx.DefaultSize)
			smtkpatch.SetFont(font)
			self.mtkpatch_num = wx.TextCtrl(panel, -1, "",size=(45,28))
			self.mtkpatch_num.Enable(False)
			spatchtype = wx.StaticText(panel, -1, " Patch type", size=wx.DefaultSize)
			spatchtype.SetFont(font)
			self.patchtype = wx.ComboBox(panel, -1, '', (0,0), (75,28),['ALPS','MOLY'], wx.CB_SIMPLE) #add by shuangyan.he 20160713
			self.patchtype.Enable(False)
			# begain add by shuangyan.he 20160705
			svnum = wx.StaticText(panel, -1, "Vnum:", size=wx.DefaultSize)
			self.vnum = wx.TextCtrl(panel, -1,"",size=(50,28))
			self.vnum.Enable(False)
			#end add by shuangyan.he 20160705
		# end add by shuangyan.he 20160624
		self.module = wx.TextCtrl(panel, -1, "", size=(160,28))
		self.solution = wx.TextCtrl(panel, -1, "", size=wx.DefaultSize)
		self.rootdetail = wx.TextCtrl(panel, -1, "", size=(650,28))  #add by yinfang.lai begin 2015-06-03
		self.suggestion = wx.TextCtrl(panel, -1, "", size=wx.DefaultSize)
		self.report = wx.TextCtrl(panel, -1, "", size=wx.DefaultSize)
		self.comment = wx.TextCtrl(panel, -1, "", size=wx.DefaultSize)
		self.filter = wx.TextCtrl(panel, -1, "", size=wx.DefaultSize)
		#begin add by shuangyan.he 2016-04-11
		self.nextgitpath = wx.TextCtrl(panel, -1, "", size=wx.DefaultSize)
		#end add by shuangyan.he 2016-04-11

		#init button
		self.ok = wx.Button(panel, -1, "OK", size=wx.DefaultSize)
		self.cancel = wx.Button(panel, -1, "Cancel", size=wx.DefaultSize)
		self.reset = wx.Button(panel, -1, "Reset", size=wx.DefaultSize)
		self.right = wx.Button(panel, -1, ">>", size=wx.DefaultSize)
		self.left = wx.Button(panel, -1, "<<", size=wx.DefaultSize)
		self.filt = wx.Button(panel, -1, "Filter", size=wx.DefaultSize)
		#add yinfang.lai 2015-03-16 begin
		self.allright = wx.Button(panel, -1, "All->>", size=wx.DefaultSize)
		self.allleft = wx.Button(panel, -1, "<<-All", size=wx.DefaultSize)
		#add yinfang.lai 2015-03-16 begin
		
		#init choice
		rootlist = ['Unknown_Today', 'Architecture', 'Specification', 'Design', 'Coding', 'Regression', 'Evolution']
		self.root = wx.ComboBox(panel, -1, "", (0,0), wx.DefaultSize, rootlist, wx.CB_SIMPLE)
		#add by yinfang.lai 2015-03-13 begin
		bug_category_list = ['Platform', 'Android', '3rd Party', 'TCT','T2M']
		jrd_bug_list = ['UE Implementation','UE Design','SW Code','Perso Tool Chain','HW Related Implementation','New Requirement','Others','UE Improvement','Not Reproduced','Not A Bug','Duplicated','Parameters','PC Tools','FOTA Tools Server Chain','Non GApp Scope','Non Isolation GApp','SW Translation Error','External Translation feedback','Customization config','Customization mechanism','Parameters Integration','GAPP']

		self.bug_category = wx.ComboBox(panel, -1, "", (0,0), wx.DefaultSize, bug_category_list, wx.CB_SIMPLE)
		self.jrd_bug = wx.ComboBox(panel, -1, "", (0,0), wx.DefaultSize, jrd_bug_list, wx.CB_SIMPLE)
		self.cMenu = wx.ComboBox(panel, -1, "No", (0,0), (70,28), ['Yes','No'], wx.CB_SIMPLE)
		#add by yinfang.lai 2015-03-13 begin end

		vallist= ['Yes','No']
		self.val = wx.ComboBox(panel, -1, "Yes", (0,0), (70,28), vallist, wx.CB_SIMPLE)
		self.auto = wx.ComboBox(panel, -1, "Yes", (0,0), (70,28), vallist, wx.CB_SIMPLE)
		prolist = []
		self.com.GetProjectList(prolist)
		#get default project xml
		currProjectXml = '%s.xml' %self.currProjectBranch
		self.product = wx.ComboBox(panel, -1, currProjectXml, (0,0), wx.DefaultSize, prolist, wx.CB_SIMPLE)
		
		#list
		self.filelist = []
		self.com.GetModifyFile(self.filelist)
		self.file = self.filelist[:]
		self.list1 = wx.ListBox(panel, -1, (20,20), (545,250), self.filelist, wx.LB_MULTIPLE)
		self.commitlist = []
		self.list2 = wx.ListBox(panel, -1, (20,20), (545,250), self.commitlist, wx.LB_MULTIPLE)
		
		#combo
		flag1 = wx.LEFT | wx.TOP | wx.BOTTOM | wx.RIGHT |wx.EXPAND
		flag2 = wx.LEFT | wx.TOP | wx.BOTTOM | wx.RIGHT
		border1 = 2;
        
		hbox1 = wx.BoxSizer()
		hbox1.Add(sproduct, proportion=0, flag=flag1, border=border1)
		hbox1.Add(self.product, proportion=0, flag=flag1, border=border1)
		hbox1.Add(sbug, proportion=0, flag=flag1, border=border1)
		hbox1.Add(self.bug, proportion=0, flag=flag1, border=border1)
		# begain add by shuangyan.he 20160624
		if(mtkpatch_on):
			hbox1.Add(sifmtkpatch, proportion=0, flag=flag1, border=border1)
			hbox1.Add(self.ifmtkpatch, proportion=0, flag=flag1, border=border1)
			hbox1.Add(smtkpatch, proportion=0, flag=flag1, border=border1)
			hbox1.Add(self.mtkpatch_num, proportion=0, flag=flag1, border=border1)
			hbox1.Add(spatchtype, proportion=0, flag=flag1, border=border1)
			hbox1.Add(self.patchtype, proportion=0, flag=flag1, border=border1)
			hbox1.Add(svnum, proportion=0, flag=flag1, border=border1)
			hbox1.Add(self.vnum, proportion=0, flag=flag1, border=border1) #add by shuangyan.he 20160705
		# end add by shuangyan.he 20160624

		#for sdd1 by yinfang.lai begin 2015-03-13	
		#if self.product_sdd1_tag == 1:
		#	self.bug_reason = wx.ComboBox(panel, -1, "", (0,0), wx.DefaultSize, bug_reason_list, wx.CB_SIMPLE)	
		#	sbug_reason = wx.StaticText(panel, -1, "Bug Reason", size=wx.DefaultSize)
		#	sbug_reason.SetFont(font)
		#	hbox1.Add(sbug_reason, proportion=0, flag=flag1, border=border1)
		#	hbox1.Add(self.bug_reason, proportion=0, flag=flag1, border=border1)
		#for sdd1 by yinfang.lai end 2015-03-13	
		
		hbox2 = wx.BoxSizer()
		hbox2.Add(sroot, proportion=0, flag=flag1, border=border1)
		hbox2.Add(self.root, proportion=0, flag=flag1, border=border1)

		#begin add by yinfang.lai begin 2015-06-03
		hbox2.Add(sroot_detail, proportion=0, flag=flag1, border=border1)
		hbox2.Add(self.rootdetail, proportion=0, flag=flag1, border=border1)
		#end add by yinfang.lai begin 2015-06-03


		#for sdd1 by yinfang.lai begin 2015-03-13	
		hbox7 = wx.BoxSizer()
		hbox7.Add(smodule, proportion=0, flag=flag1, border=border1)
		hbox7.Add(self.module, proportion=0, flag=flag1, border=border1)
		hbox7.Add(scategory, proportion=0, flag=flag1, border=border1)
		hbox7.Add(self.bug_category, proportion=0, flag=flag1, border=border1)
		hbox7.Add(sjrdbug, proportion=0, flag=flag1, border=border1)
		hbox7.Add(self.jrd_bug, proportion=0, flag=flag1, border=border1)
		hbox7.Add(sMenu, proportion=0, flag=flag1, border=border1)
		hbox7.Add(self.cMenu, proportion=0, flag=flag1, border=border1)
		#for sdd1 by yinfang.lai end 2015-03-13	
		
		hbox3 = wx.BoxSizer()
		hbox3.Add((420,28), proportion=0,flag=flag2,border=border1)
		hbox3.Add(self.ok, proportion=0, flag=flag1, border=border1)
		hbox3.Add(self.cancel, proportion=0, flag=flag1, border=border1)
		hbox3.Add(self.reset, proportion=0, flag=flag1, border=border1)
		hbox3.Add(self.filt, proportion=0, flag=flag1, border=border1)
		
		hbox4 = wx.BoxSizer()
		hbox4.Add(sval, proportion=0, flag=flag1, border=border1)
		hbox4.Add(self.val, proportion=0, flag=flag1, border=border1)
		hbox4.Add(supdate, proportion=0, flag=flag1, border=border1)
		hbox4.Add(self.auto, proportion=0, flag=flag1, border=border1)
		
		vbox1 = vbox = wx.BoxSizer(wx.VERTICAL)
		vbox1.Add(self.right, proportion=0,flag=flag1, border=border1)
		vbox1.Add(self.left, proportion=0,flag=flag1,border=border1)
		#add yinfang.lai 2015-03-16 begin
		vbox1.Add(self.allright, proportion=0,flag=flag1,border=border1)
		vbox1.Add(self.allleft, proportion=0,flag=flag1,border=border1)
		#add yinfang.lai 2015-03-16 end
		
		hbox5 = wx.BoxSizer()
		hbox5.Add(self.list1, proportion=0, flag=flag2, border=border1)
		hbox5.Add(vbox1, proportion=0,flag=flag2,border=border1)
		hbox5.Add(self.list2, proportion=0,flag=flag2,border=border1)
		
		hbox6 = wx.BoxSizer()
		hbox6.Add(modify, proportion=0,flag=flag2,border=border1)
		hbox6.Add((550,28), proportion=0,flag=flag2,border=border1)
		hbox6.Add(commit, proportion=0,flag=flag2,border=border1)
		
		vbox = wx.BoxSizer(wx.VERTICAL)
		vbox.Add(hbox1, proportion=0, flag=flag1, border=border1)
		vbox.Add(hbox2, proportion=0, flag=flag1, border=border1)

		#for sdd1 by yinfang.lai begin 2015-03-13	
		vbox.Add(hbox7, proportion=0, flag=flag1, border=border1)
		#for sdd1 by yinfang.lai end 2015-03-13	

		vbox.Add(ssolution, proportion=0, flag=flag1, border=border1)
		vbox.Add(self.solution, proportion=0, flag=flag1, border=border1)
		vbox.Add(ssuggestion, proportion=0, flag=flag1, border=border1)
		vbox.Add(stctxt1, proportion=0, flag=flag1, border=border1)
		vbox.Add(self.suggestion, proportion=0, flag=flag1, border=border1)
		vbox.Add(sreport, proportion=0, flag=flag1, border=border1)
		vbox.Add(stctxt2, proportion=0, flag=flag1, border=border1)
		vbox.Add(self.report, proportion=0, flag=flag1, border=border1)
		vbox.Add(hbox4, proportion=0, flag=flag1, border=border1)
		vbox.Add(scomment, proportion=0, flag=flag1, border=border1)
		vbox.Add(self.comment, proportion=0, flag=flag1, border=border1)
		vbox.Add(filter1, proportion=0, flag=flag1, border=border1)
		vbox.Add(self.filter, proportion=0, flag=flag1, border=border1)
		#begin add by shuangyan.he 2016-04-11
		vbox.Add(snextgitpath, proportion=0, flag=flag1, border=border1)
		vbox.Add(stctxt3, proportion=0, flag=flag1, border=border1)
		vbox.Add(self.nextgitpath, proportion=0, flag=flag1, border=border1)
		#end add by shuangyan.he 2016-04-11
		vbox.Add(hbox6, proportion=0, flag=flag2, border=border1)
		vbox.Add(hbox5, proportion=0, flag=flag2, border=border1)
		vbox.Add(hbox3, proportion=0, flag=wx.TOP, border=border1)
		
		panel.SetSizer(vbox)
		if(mtkpatch_on):
			self.ifmtkpatch.Bind(wx.EVT_COMBOBOX, self.ismtkpatch) # add by shuangyan.he 20160711
			self.mtkpatch_num.Bind(wx.EVT_TEXT, self.ismtkpatchnum) # add by shuangyan.he 20160711
			self.patchtype.Bind(wx.EVT_COMBOBOX, self.ispatchtype) # add by shuangyan.he 20160711
		self.ok.Bind(wx.EVT_BUTTON, self.OnOk)
		self.cancel.Bind(wx.EVT_BUTTON, self.OnCancel)
		self.reset.Bind(wx.EVT_BUTTON, self.OnReset)
		self.right.Bind(wx.EVT_BUTTON, self.OnRight)
		self.left.Bind(wx.EVT_BUTTON, self.OnLeft)
		self.filt.Bind(wx.EVT_BUTTON, self.OnFilter)
		
		#add yinfang.lai 2015-03-16 begin
		self.allright.Bind(wx.EVT_BUTTON, self.OnAllRight)
		self.allleft.Bind(wx.EVT_BUTTON, self.OnAllLeft)
		#add yinfang.lai 2015-03-16 end


         #add by zhaoshie 20160629 for check unmerged files
        def check_unmerged_from_commit_contents(self,commitlist):
               patch_delivery_path = sys.path[0] 
               unmerged_files=[] 
               for file_name in commitlist :
                   if 'U--' == file_name[0:3]:  
	   	        unmerged_files.append(file_name)
               if unmerged_files != []:
                   print "\033[31mError!! %s is unmerged file, which not allowed to upload,Pls fix them up in the work tree... \033[0m\n " %unmerged_files
                   self.CreateMessageDialog("[Error!!]  %s is unmerged file, which not allowed to upload,Pls fix them up in the work tree..." %unmerged_files) 
                   return False                      
               return True
        #end add by zhaoshie 20160629 for check unmerged files


         #add by zhaoshie 2016-3-2 for check debuaggable info and test key info in apks
        def check_apks_from_commit_contents(self,commitlist):
               patch_delivery_path = sys.path[0]  
               for file_name in commitlist :
                   if '.apk' in file_name:
                        tmp = file_name[3:]     
                        cmd = getoutput("%s/aapt list -v -a %s | grep 'debuggable' | grep '0xffffffff' " %(patch_delivery_path,tmp) )
	                if cmd != '':
	   	               print "%s has the debuggable info,pls modify it" %file_name
                               self.CreateMessageDialog("%s has the debuggable info,pls modify it" %file_name ) 
                               return False
                        is_GMS_apk = getoutput("echo %s | grep '/GMS/'" %tmp)
                        if is_GMS_apk == '' :
                              cmd = getoutput("jarsigner -verify -verbose -certs %s | grep -c 'CN=Android, OU=Android, O=Android'" %tmp)                             
                              if cmd != '0' :
                                  print "%s has the test key,please remove this apk or sign it with the right key" %file_name
                                  self.CreateMessageDialog("%s has the test key,please remove this apk or sign it with the right key" %file_name )
                                  return False
               return True
        #add by zhaoshie 20160602 for check mtk default file forbid or remind
        def check_mtkfile_from_commit_contents(self,commitlist):
               patch_delivery_path = sys.path[0]                               
               repo_path_1 = getoutput('bash %s/find_repo_path.sh' %patch_delivery_path) 
               repo_path_2 = repo_path_1.split("\n")
               repo_path = repo_path_2[-1]+'/'
               current_path = getoutput("pwd")
               git_path = current_path.replace(repo_path,'')  
               forbid_files = []
               remind_files = []
               for file_commit in commitlist:
                    file_path_commit = "%s/%s" %(git_path,file_commit[3:])
                    cmd = getoutput("cat %s/../conf/impact_mtkpatch/forbid_file_config | grep %s " %(patch_delivery_path ,file_path_commit))
                    if cmd != '':
                       forbid_files.append(cmd)
                    fo=file("%s/../conf/impact_mtkpatch/forbid_dir_config"%patch_delivery_path,"r")
                    forbid_dir=fo.readlines()
                    print forbid_dir
                    for each_forbid_dir in forbid_dir:
                        each_forbid_dir=each_forbid_dir[:-1]
                        cmdforbid = getoutput("echo %s | grep %s " %(file_path_commit,each_forbid_dir) )
                        if cmdforbid != '':
                            forbid_files.append(cmdforbid)
                    fo=file("%s/../conf/impact_mtkpatch/remind_mtkproject" %patch_delivery_path,"r")
                    remind_name=fo.readlines()
                    for each_remind_name in remind_name:
                         each_remind_name=each_remind_name[:-1]
                         cmdremind = getoutput("echo %s | grep %s " %(file_path_commit,each_remind_name))
                         if cmdremind != '':
                             remind_files.append(cmdremind)               
               if forbid_files != []:
                    print "\033[31mError!! %s is MTK default file,which not allowed to upload. Pls choice right JRD file \033[0m\n " %forbid_files
                    self.CreateMessageDialog("[Error!!] %s is MTK default file,which not allowed to upload.Pls choice right JRD file" %forbid_files ) 
                    return False
               if  remind_files != []:
                    print "\033[35m[Notice!!] the commited contents %s is MTK Project Config file.You need merge it to JRD Project Config file\033[0m\n" %remind_files 
                    self.CreateMessageDialog("[Notice!!] the commited contents %s is MTK Project Config file.You need merge it to JRD Project Config file" %remind_files) 
               return True
                                                         
        #end added by zhaoshie 2016-3-2
	
        #add by zhaoshie 20160622 for check fota file to impact
        def check_fotas_from_commit_contents(self,commitlist):
               patch_delivery_path = sys.path[0]                               
               repo_path_1 = getoutput('bash %s/find_repo_path.sh' %patch_delivery_path) 
               repo_path_2 = repo_path_1.split("\n")
               repo_path = repo_path_2[-1]+'/'
               current_path = getoutput("pwd")
               git_path = current_path.replace(repo_path,'')  
               fota_files = []
               remind_files = []
               for file_commit in commitlist:
                    file_path_commit = "%s/%s" %(git_path,file_commit[3:])
                    cmdfota = getoutput("cat %s/../conf/impact_fota_sdd1/fota_file_config | grep %s " %(patch_delivery_path ,file_path_commit))
                    if cmdfota != '':
                       fota_files.append(cmdfota)
                       self.com.impactFotaFileAndDir.append(cmdfota)
                    fo=file("%s/../conf/impact_fota_sdd1/fota_file_config" %patch_delivery_path,"r")
                    fota_project_file=fo.readlines()
                    for each_fota_project_file in fota_project_file:
                        each_fota_project_file=each_fota_project_file[:-1]
                        if("%project" in each_fota_project_file):
                           fota_lines=each_fota_project_file.split('/%project/')
                           isfotaproject=False
                           for fota_line in fota_lines :
                              if fota_line in file_path_commit :
                                 isfotaproject=True
                              else:
                                 isfotaproject=False
                                 break;
                           if(isfotaproject==True):
                                 fota_files.append(file_path_commit)
                                 self.com.impactFotaFileAndDir.append(file_path_commit) 
                    fo=file("%s/../conf/impact_fota_sdd1/fota_dir_config"%patch_delivery_path,"r")
                    fota_dir=fo.readlines()
                    for each_fota_dir in fota_dir:
                        each_fota_dir=each_fota_dir[:-1]
                        cmdfota = getoutput("echo %s | grep %s " %(file_path_commit,each_fota_dir) )
                        if cmdfota != '':
                            fota_files.append(cmdfota) 
                            self.com.impactFotaFileAndDir.append(cmdfota)            
               if fota_files != []:
                    self.com.isimpactfota = True                   
                    print "\033[35mNotice!!the commited contents :%s may impact fota \033[0m\n " %fota_files
                    self.CreateMessageDialog("[Notice!!] the commited contents :%s may impact fota" %fota_files ) 
               return True
                                                         
        #end added by zhaoshie 2016-3-2

        #add by zhaoshie 20161101 for check tee file to impact
        def check_tee_from_commit_contents(self,commitlist):
               patch_delivery_path = sys.path[0]                               
               repo_path_1 = getoutput('bash %s/find_repo_path.sh' %patch_delivery_path) 
               repo_path_2 = repo_path_1.split("\n")
               repo_path = repo_path_2[-1]+'/'
               current_path = getoutput("pwd")
               git_path = current_path.replace(repo_path,'')  
               for file_commit in commitlist:
                    file_path_commit = "%s/%s" %(git_path,file_commit[3:])
                    fo=file("%s/../conf/impact_tee/tee_dir_config" %patch_delivery_path,"r")
                    tee_dir=fo.readlines()
                    for each_tee_dir in tee_dir:
                        each_tee_dir=each_tee_dir[:-1]
                        cmdtee = getoutput("echo %s | grep %s " %(file_path_commit,each_tee_dir) )
                        if cmdtee != '':
                            self.com.impactTeeFileAndDir.append(cmdtee)            
               return True
        def check_persist_from_commit_contents(self,commitlist):
               patch_delivery_path = sys.path[0]                               
               repo_path_1 = getoutput('bash %s/find_repo_path.sh' %patch_delivery_path) 
               repo_path_2 = repo_path_1.split("\n")
               repo_path = repo_path_2[-1]+'/'
               current_path = getoutput("pwd")
               git_path = current_path.replace(repo_path,'')  
               for file_commit in commitlist:
                    file_path_commit = "%s/%s" %(git_path,file_commit[3:])
                    cmdpersist = getoutput("cat %s/../conf/impact_tee/persist_file_config | grep %s " %(patch_delivery_path ,file_path_commit))
                    if cmdpersist != '':
                       self.com.impactPersistFileAndDir.append(cmdpersist)          
               return True
                                                         
        #end added by zhaoshie 20161101

        
	# begain add by shuangyan.he 20160713
	def ismtkpatch(self,event):
		self.msg.ifmtkpatch=self.ifmtkpatch.GetValue()
		if self.msg.ifmtkpatch=="No":
			self.mtkpatch_num.SetValue("")
			self.mtkpatch_num.Enable(False)
			self.patchtype.SetValue("")
			self.patchtype.Enable(False)
			self.vnum.SetValue("")
			self.vnum.Enable(False)
		if self.msg.ifmtkpatch=="Yes":
			self.mtkpatch_num.Enable(True)
			self.patchtype.Enable(True)
			self.vnum.Enable(True)
		return
	# end add by shuangyan.he 20160713
	# begain add by shuangyan.he 20160714
	def ismtkpatchnum(self,event):			
		self.patchtype.SetValue("")
		self.vnum.SetValue("")
		return
	# end add by shuangyan.he 20160714
	# begain add by shuangyan.he 20160706
	def ispatchtype(self, event):
		self.vnum.SetValue("")
		self.msg.mtkpatch_num=self.mtkpatch_num.GetValue()
		mtkpatch_num=self.msg.mtkpatch_num.strip()
		mtkpatch_num=mtkpatch_num.lower()
		if(mtkpatch_num.isdigit()):
			mtkpatch_num = "p"+mtkpatch_num
		self.msg.patchtype=self.patchtype.GetValue()
		if mtkpatch_num:
			idvnum_dic1 = self.com.getidvnum_mtkmerge(mtkpatch_num,self.currProjectBranch,self.msg.patchtype)
			if idvnum_dic1:
				vnum_choice=""
				for key in idvnum_dic1:
					vnum_choice=idvnum_dic1[key]
					self.id_choice=key
				self.vnum.SetValue(vnum_choice)
				self.vnum.SetEditable(False)
			else:
				if self.CrtMessageDialog("do you input Pnum right?\nYes=> to contact INT import db.\nNo=>  to modify Pnum."):
					self.vnum.SetValue("")
				else:
					self.mtkpatch_num.SetValue("")
					self.patchtype.SetValue("")
					self.vnum.SetValue("")
		else:
			self.CrtMessageDialog("\nPls input Pnum before choose patch type.")

		return
	# end add by shuangyan.he 20160706
	#ok
	def OnOk(self, event):
                almbranchs=[]
		if self.GetMessage(self.msg):
                        if self.commitlist: 
                            #add by zhaoshie 20160629 for check unmerged file
                            if self.check_unmerged_from_commit_contents(self.commitlist):
                                print "There is no unmerged files!OK,go next!"
                            else:
                                return False   
                            #end                    
                            if self.check_apks_from_commit_contents(self.commitlist):
                                print "check apk debuaggable and test key info OK!go next!"
                            else:
                                return False 
                            if self.check_mtkfile_from_commit_contents(self.commitlist):  
                                print "check mtk default file OK,go next!"
                            else:
                                return False  
                            #add by zhaoshie 2016-6-22 for fota impact
                            if self.check_fotas_from_commit_contents(self.commitlist):  
                                print "check fota file OK,go next!"
                            else:
                                return False 
                            #add by zhaoshie 2016-11-1 for tee impact
                            self.check_tee_from_commit_contents(self.commitlist)  
                            self.check_persist_from_commit_contents(self.commitlist)
                            #end
                
                 
			#for sdd1 by yinfang.lai begin 2015-03-13
			#check ALM task or defect state
			if self.pro_config == "ALM":
				almbranchs = self.com.getalmbranch(self.currProjectBranch)
				if len(almbranchs) >=2:
					del almbranchs[0:2]
					print almbranchs
				if self.com.check_defect_task(self.currProjectBranch,self.msg.bugnumber,almbranchs):
                                   print "Check Defect or task OK!go Next"
                                else:
                                   return False
			self.com.ComboMessage(self.msg)                       
 			#modify by yinfang.lai 2015-03-16 begin
			#self.com.Commit(self.commitlist)
			#self.com.CommitDict(self.commitlist,self.com.fileDic) #delete by zhaoshie 2016-5-12
			#modify by yinfang.lai 2015-03-16 end
		else:
			return False
		if self.msg.autoupdate == 'Yes':
			if self.CrtMessageDialog(self.com.defect_summary):	
			#for sdd1 by yinfang.lai end 2015-03-13	
				gitlist = []
				product = []
				name = []
				self.com.GitName(name)
				print '-----------------%s' %self.product.GetValue()
				self.com.GetGitList(self.product.GetValue(), gitlist, product)
				print name
				print gitlist
				print product
				#add by laiyinfang 2016-12-09 check lastmtkpatch is ok
			        if(mtkpatch_on):
				    if(self.msg.ifmtkpatch=="Yes"):
				        lastest_mtkpatch_num = self.msg.mtkpatch_num.strip()
				        lastest_mtkpatch_num = lastest_mtkpatch_num.replace('p','')
				        lastest_mtkpatch_num = lastest_mtkpatch_num.replace('P','')
				        last_mtkpatch_num = int(lastest_mtkpatch_num) -1
				        self.com.check_last_mtk_patch_status(product[0],last_mtkpatch_num)
			        #end by lyf 2016-12-09					
				if self.CrtMessageDialog("git push ssh://%s@10.92.32.10:29418/%s HEAD:refs/for/%s" %(name[0], gitlist[0], product[0])):			
                                        self.com.CommitDict(self.commitlist,self.com.fileDic) #add by zhaoshie 2016-5-12
					self.com.Gerrit(name, gitlist, product)	
					#for sdd1 by yinfang.lai begin 2015-03-13
					if self.product_sdd1_tag == 1:
						self.com.update_bug_reason_prsm(self.pro_config,self.msg.bug_reason_cause,self.bug.GetValue())
					#for sdd1 by yinfang.lai end 2015-03-13	
                                        if(mtkpatch_on):
						if((self.msg.ifmtkpatch=="Yes") and self.msg.mtkpatch_num.strip() and self.msg.patchtype.strip() and self.msg.vnum_choice.strip()):
							#begain add by shuangyan.he 20160707						        
							changeId = self.com.getChangeId()
							gerrit_link="http://10.92.32.10:8081/#/c/%s/" %changeId
							TS=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
							owner=[]
							owner=self.com.GitEmail(owner)
							self.com.update_mtkpatch_mtkmerge(self.msg.mtkpatch_num.strip(),product[0],self.msg.patchtype.strip(),self.msg.vnum_choice.strip(),self.msg.bugnumber,gerrit_link,owner[0],TS)
							#end add by shuangyan.he 20160707
                                       		#begain add by shuangyan.he 20160715
						if((self.msg.ifmtkpatch=="Yes") and self.msg.mtkpatch_num.strip() and self.msg.patchtype.strip()):
							self.com.mtkpatch_email_remind(gitlist[0],product[0],self.commitlist)
                                        	#end add by shuangyan.he 20160715
                                        
                                        self.com.impact_app_warning(gitlist[0],product[0],self.commitlist) #add by zhaoshie 2016-5-12
                                        #add by zhaoshie 2016-06-22 for impact fota
                                        if(self.com.isimpactfota):
                                           self.com.impact_email_warning(self.com.impactFotaFileAndDir,product[0],'fota')	
                                        #end by zhaoshie 2016-06-22 for impact fota
                                        #add by zhaoshie 2016-11-1 for tee and persist impact
                                        if self.com.impactTeeFileAndDir != []:
                                            self.com.impact_email_warning(self.com.impactTeeFileAndDir,product[0],'tee') 
                                        if self.com.impactPersistFileAndDir != [] :
                                            self.com.impact_email_warning(self.com.impactPersistFileAndDir,product[0],'persist')
                                        #end
                                        
                                        print "\033[32;1m---------- this git path OK ----------\033[0m" 	
				else:
					print "do nothing"
					sys.exit(0) #add by shuangyan.he
			else:
				print "Defect|Task is Wrong!!!"
				sys.exit(0) #add by shuangyan.he
		#begain add by shuangyan.he 2016-04-12
			#sys.exit(0)
		#return 
		#Change next git path
			if (self.msg.nextgitpath != ''):
				self.com.defect_summary = ''
				self.list1.Clear()
				self.list2.Clear()
				os.chdir(self.msg.nextgitpath)
				print "\033[31;1m--------- Now start next git path ---------\033[0m"
				os.system("pwd")
				#reload Modify file
				self.filelist = []
				self.com.GetModifyFile(self.filelist)
				#reload commit file
				self.file = self.filelist[:]
				self.list1.Set(self.filelist)
				self.commitlist = []
				self.list2.Set(self.commitlist)
				self.nextgitpath.Clear() #after one patch,clear it's path
				self.ok.Bind(wx.EVT_BUTTON, self.OnOk) #recursion OnOk
				self.cancel.Bind(wx.EVT_BUTTON, self.OnCancel)
				self.reset.Bind(wx.EVT_BUTTON, self.OnReset)
				self.right.Bind(wx.EVT_BUTTON, self.OnRight)
				self.left.Bind(wx.EVT_BUTTON, self.OnLeft)
				self.filt.Bind(wx.EVT_BUTTON, self.OnFilter)
				self.allright.Bind(wx.EVT_BUTTON, self.OnAllRight)
				self.allleft.Bind(wx.EVT_BUTTON, self.OnAllLeft)
				
			else: #'self.msg.nextgitpath is empty'means this is last patch，when patch_delivery done ,exit.
				sys.exit(0)
		# self.msg.autoupdate=='No' will exit
                else:
			sys.exit(0)
		return
		#end add by shuangyan.he 2016-04-12

	#left
	def OnLeft(self, event):
		if self.list2.GetString(0) == "":
			print "do nothing"
			return
		
		name = self.list2.GetSelections()
		for i in range(len(name)):
			if self.list2.GetString(name[i]) in self.commitlist:
				self.commitlist.remove(self.list2.GetString(name[i]))
				self.file.append(self.list2.GetString(name[i]))
				
		self.list1.Set(self.file)
		self.list2.Set(self.commitlist)
		return
		
	#right
	def OnRight(self, event):
		if self.list1.GetString(0) == "":
			print "do nothing"
			return
		
		name = self.list1.GetSelections()
		print name
		for i in range(len(name)):
			if self.list1.GetString(name[i]) in self.file:
				self.file.remove(self.list1.GetString(name[i]))
				self.commitlist.append(self.list1.GetString(name[i]))

		self.list1.Set(self.file)
		self.list2.Set(self.commitlist)
		return

	#Allright
	#add yinfang.lai 2015-03-16 begin
	def OnAllRight(self, event):
		if self.list1.GetString(0) == "":
			print "do nothing"
			return
		
		lenlist1 = self.list1.GetCount()
		for i in range(lenlist1):
			if self.list1.GetString(i) in self.file:
				self.file.remove(self.list1.GetString(i))
				self.commitlist.append(self.list1.GetString(i))

		self.list1.Set(self.file)
		self.list2.Set(self.commitlist)
		return
	#left
	def OnAllLeft(self, event):
		if self.list2.GetString(0) == "":
			print "do nothing"
			return
		
		lenlist2 = self.list2.GetCount()
		for i in range(lenlist2):
			if self.list2.GetString(i) in self.commitlist:
				self.commitlist.remove(self.list2.GetString(i))
				self.file.append(self.list2.GetString(i))
				
		self.list1.Set(self.file)
		self.list2.Set(self.commitlist)
		return
	#add yinfang.lai 2015-03-16 end

	#cancel
	def OnCancel(self, event):
		print "no commit"
		sys.exit(0)
		return
	#filter
	def OnFilter(self, event):
		if not self.filter.GetValue():
			self.file = self.filelist[:]
			self.list1.Set(self.file)
			self.list2.Set('')
			self.CreateMessageDialog("Please input filter")
			return
		temp = self.filter.GetValue()
		#print temp
		temp1 = temp.split(',')
		#print temp1
		templist1 = self.filelist[:]
		#print templist1
		for j in range(len(temp1)):
			#print len(templist1)
			templist = []
			for i in range(len(templist1)):
				line = '.%s$' %temp1[j]
				#print line
				match = re.match(line, templist1[i])
				if not match:
					#print templist1[i]
					templist.append(templist1[i])
			templist1 = templist[:]
			#print templist1
		#print templist
		self.file = templist[:]
		self.list1.Set(self.file)
		self.list2.Set('')
		return
	
	#reset
	def OnReset(self, event):
		self.comment.SetValue("")
		self.bug.SetValue("")
		if(mtkpatch_on):
			self.mtkpatch_num.SetValue("")   #add by shuangyan.he 20160624
			self.vnum.SetValue("")  #add by shuangyan.he 20160705
			self.ifmtkpatch.SetValue("")  #add by shuangyan.he 20160711
		self.product.SetValue("")
		self.root.SetValue("")
		self.rootdetail.SetValue("")  #add by yinfang.lai begin 2015-06-03
		self.module.SetValue("")
		self.suggestion.SetValue("")
		self.solution.SetValue("")
		self.report.SetValue("")
		self.val.SetValue("")
		self.auto.SetValue("")
		self.list1.Set(self.filelist)
		self.list2.Set("")
		self.filter.SetValue("")
		self.nextgitpath.SetValue("")  #add by shuangyan.he 2016-04-11
		self.file = self.filelist[:]
		self.commitlist =[]
		return
		
	#dialog
	def CrtMessageDialog(self,string):
		dlg = wx.MessageDialog(self, string, "Gerrit", wx.YES_NO | wx.ICON_QUESTION)
		retCode = dlg.ShowModal()
		if retCode == wx.ID_YES:
			return True
		else:
			return False
		dlg.Destroy()

	#dialog
	def CreateMessageDialog(self, string):
		dlg = wx.MessageDialog(self, string, "Input Error", wx.OK)
		dlg.ShowModal()
		dlg.Destroy()
		return
		
	def GetMessage(self, message):
		self.msg.comment=self.comment.GetValue()
		self.msg.nextgitpath=self.nextgitpath.GetValue()  #add by shuangyan.he 2016-04-11
		self.msg.bugnumber=self.bug.GetValue()
		# begain add by shuangyan.he 20160624
		if(mtkpatch_on):
			self.msg.ifmtkpatch=self.ifmtkpatch.GetValue()  #add by shuangyan.he 20160711
			if self.msg.ifmtkpatch=="Yes":
				self.msg.mtkpatch_num=self.mtkpatch_num.GetValue()
				self.msg.mtkpatch_num=self.msg.mtkpatch_num.strip()
				self.msg.patchtype=self.patchtype.GetValue()
				self.msg.vnum_choice=self.vnum.GetValue()  #add by shuangyan.he 20160705
		# end add by shuangyan.he 20160624
		self.msg.productname=self.product.GetValue()[:-4]
		self.msg.rootcause=self.root.GetValue()
		self.msg.rootdetail=self.rootdetail.GetValue() #add by yinfang.lai begin 2015-06-03
		self.msg.moduleimpact=self.module.GetValue()
		self.msg.menu_change=self.cMenu.GetValue()
		self.msg.testsuggestion=self.suggestion.GetValue()
		self.msg.solution=self.solution.GetValue()
		self.msg.testreport=self.report.GetValue()
		self.msg.valtest=self.val.GetValue()
		self.msg.autoupdate=self.auto.GetValue()

		#for sdd1 by yinfang.lai begin 2015-03-13	
		self.msg.bug_category_cause=self.bug_category.GetValue()
		self.msg.jrd_bug_cause=self.jrd_bug.GetValue()
		if self.product_sdd1_tag == 1:
			if self.msg.bug_category_cause == 'TCT':
				self.msg.bug_reason_cause = self.msg.jrd_bug_cause
			else:
                                self.msg.bug_reason_cause = self.msg.bug_category_cause
		#for sdd1 by yinfang.lai end 2015-03-13			
		

		
		if not self.msg.productname:
			self.CreateMessageDialog("Please input Product")
			return False
	
		if not self.msg.bugnumber:
			self.CreateMessageDialog("Please input Bug Number")
			return False
			
		for one in re.split('\s*,\s*', self.msg.bugnumber):
			if not re.match('\d+$', one):
				self.CreateMessageDialog("Bug Number error: must be number(s), use ',' to seperate")
				return False

		# begain add by shuangyan.he 20160705
		if(mtkpatch_on):
			if self.msg.ifmtkpatch=='':
				self.CreateMessageDialog("Please select is MtkPatch?")
				return False
			if self.msg.ifmtkpatch=="Yes":
				if not self.msg.mtkpatch_num:
					self.CreateMessageDialog("Please Input Pnum")
					return False
				if not self.msg.patchtype:
					self.CreateMessageDialog("Please Select Patch type")
					return False
		# end add by shuangyan.he 20160705
		
		if not self.msg.rootcause:
			self.CreateMessageDialog("Please select Root cause")
			return False

		#begin add sdd1 by yinfang.lai begin 2015-06-03
		if not self.msg.rootdetail:
			self.CreateMessageDialog("Please input Root cause Detail")
			return False
		#beginadd sdd1 by yinfang.lai begin 2015-06-03

		if not self.msg.moduleimpact:
			self.CreateMessageDialog("Please input Module Impact")
			return False


		#for sdd1 by yinfang.lai begin 2015-03-13	
		if not self.msg.bug_category_cause:
			self.CreateMessageDialog("Please select Bug category cause")
			return False

		if not self.msg.jrd_bug_cause:
			self.CreateMessageDialog("Please select Generated by cause")
			return False

		#for sdd1 by yinfang.lai end 2015-03-13	
			
		if not self.msg.solution:
			self.CreateMessageDialog("Please input Solution")
			return False
			
		if not self.msg.testsuggestion:
			self.CreateMessageDialog("Please input Test Suggestion")
			return False
			
		if not self.msg.testreport:
			self.CreateMessageDialog("Please input Test Report")
			return False
		
		if not self.msg.valtest:
			self.CreateMessageDialog("Please select VAL Can Test")
			return False
			
		if not self.msg.autoupdate:
			self.CreateMessageDialog("Please select Auto Update")
			return False
			
		if not self.msg.comment:
			self.CreateMessageDialog("Please input Comment")
			return False
		
		if not self.commitlist:
			self.CreateMessageDialog("Please select Commit File")
			return False
		#test
		print self.msg.nextgitpath #add by shuangyan.he 2016-04-11
		print self.msg.comment
		print self.msg.bugnumber
		if(mtkpatch_on):
			print self.msg.ifmtkpatch  #add by shuangyan.he 20160711
			if self.msg.ifmtkpatch=="Yes":
				print self.msg.mtkpatch_num  #add by shuangyan.he 20160624
				print self.msg.patchtype
				print self.msg.vnum_choice  #add by shuangyan.he 20160705
		print self.msg.productname
		print self.msg.rootcause
		print self.msg.rootdetail  #add by yinfang.lai begin 2015-06-03
		print self.msg.moduleimpact
		print self.msg.testsuggestion
		print self.msg.solution
		print self.msg.testreport
		print self.msg.valtest
		print self.msg.bug_category_cause
		print self.msg.jrd_bug_cause
		print self.msg.bug_reason_cause
		print self.msg.menu_change
		#print self.bug_reason.GetSelection()
		#end
		return True
		
if __name__ == '__main__':
    app = App()
    app.MainLoop()
